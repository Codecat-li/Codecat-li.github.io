<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>子安的前端世界</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-19T06:11:36.630Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>李宝霖</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo更换主题不生效</title>
    <link href="http://example.com/2023/03/19/hexoUseGuide/"/>
    <id>http://example.com/2023/03/19/hexoUseGuide/</id>
    <published>2023-03-19T05:16:27.534Z</published>
    <updated>2023-03-19T06:11:36.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客-Next更换修改主题样式-不生效的解决"><a href="#Hexo博客-Next更换修改主题样式-不生效的解决" class="headerlink" title="Hexo博客 Next更换修改主题样式 不生效的解决"></a>Hexo博客 Next更换修改主题样式 不生效的解决</h1><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>在对下面的Next主题样式修改时候，博客站点可能无法正常生效。</p><pre><code class="hljs plaintext"># Schemesscheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini</code></pre><blockquote><p>解决方法：</p></blockquote><blockquote><blockquote><p>1.在git bash中进入hexo目录，执行</p></blockquote></blockquote><pre><code class="hljs plaintext">hexo clean</code></pre><p>后 再执行</p><pre><code class="hljs plaintext">hexo g -d</code></pre><blockquote><blockquote><p>2.浏览器清除缓存</p></blockquote></blockquote><blockquote><blockquote><p>3.刷新页面即可生效</p></blockquote></blockquote><p><a href="https://zhangshao7.github.io/tags/hexo/"># hexo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo博客-Next更换修改主题样式-不生效的解决&quot;&gt;&lt;a href=&quot;#Hexo博客-Next更换修改主题样式-不生效的解决&quot; class=&quot;headerlink&quot; title=&quot;Hexo博客 Next更换修改主题样式 不生效的解决&quot;&gt;&lt;/a&gt;Hexo博客 N</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo发布流程</title>
    <link href="http://example.com/2023/03/19/hexoCommand/"/>
    <id>http://example.com/2023/03/19/hexoCommand/</id>
    <published>2023-03-19T05:16:27.531Z</published>
    <updated>2023-03-19T05:17:00.724Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="hljs bash"><span class="hljs-comment"># 生成静态网站文件</span>hexo g  <span class="hljs-comment"># 上传到远程仓库</span>hexo d  <span class="hljs-comment"># 1、清除 hexo 的缓存</span>hexo clean<span class="hljs-comment"># 2、采用一键部署</span>hexo g --d123456789</code></pre><p>可以直接到根目录 &#x2F;source&#x2F;_posts 目录下，创建一个.md 文件进行编写，在文件的顶部添加下面内容就可以了，主要写一个 title 就好了，其他都可以省略</p><hr><p>title: 文章名称<br>date: 2020-07-30 16:46:07(创建时间)<br>tags: 标签名<br>categories: 分类<br>description: 描述<br>comments: 是否开启评论(true or false)</p><p>之后，使用 <strong>hexo g –d</strong> 命令推送到 gitee上，并在 gitee 上更新一下 Gitee Pages 服务即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# 生成静态网站文件&lt;/span&gt;
hexo g  
&lt;span class=&quot;hljs-comment&quot;&gt;# 上传到远程仓库&lt;/span&gt;
hexo d  

&lt;sp</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web基础</title>
    <link href="http://example.com/2023/03/19/webFoundation/"/>
    <id>http://example.com/2023/03/19/webFoundation/</id>
    <published>2023-03-19T03:37:31.426Z</published>
    <updated>2023-03-19T03:48:27.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-HTML笔记"><a href="#1-HTML笔记" class="headerlink" title="1.HTML笔记"></a>1.HTML笔记</h1><p>##1.1 vsc快写：<br>   <pre><code class="hljs html"><span class="hljs-comment">&lt;!-- li*2: --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-comment">&lt;!-- ol&gt;li*2&#123;x&#125; --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>x<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>x<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></code></pre></p><h2 id="1-2-标签特点"><a href="#1-2-标签特点" class="headerlink" title="1.2 标签特点"></a>1.2 标签特点</h2><ul><li><p>块级元素：独占一行，可以设置宽、高、对齐。如<h1>~<h6>,<p>,<div>,<ul>,<ol>,<li>等。</p></li><li><p>行内元素： 不占有独立的区域，仅仅依靠自己的字体大小或者是图像大小来支撑结构。</p><p> &#x3D;&#x3D;一般不可以设置宽度，高度以及对齐等属性。默认的宽度就是它本身的宽度 。&#x3D;&#x3D;</p><p>如：<a >,<strong>,<b>,<em>,<del>,<span >等。</p></li><li><p>行内块级元素：它既具有块级元素的特点，也有行内元素的特点，&#x3D;&#x3D;它可以自由设置元宽度和高度， 也可以在一行中放置多个行内块级元素。&#x3D;&#x3D;比如<input>、<img>就是行内块级元素，它可以设置高宽以及一行多个。</p></li></ul><p>##语义化</p><ul><li><p>网页后缀为html</p></li><li><p>标签语义化</p></li><li><p>SEO三大标签：<title>，<meta>（description，keywords）；</p></li><li><p>标签icon：<link href="favicon.ico"></p></li></ul><h1 id="2-css3笔记"><a href="#2-css3笔记" class="headerlink" title="2.css3笔记"></a>2.css3笔记</h1><h2 id="2-1-内减模式："><a href="#2-1-内减模式：" class="headerlink" title="2.1 内减模式："></a>2.1 内减模式：</h2>   <pre><code class="hljs css"><span class="hljs-comment">/*可以自动减去border的边距和宽度。*/</span><span class="hljs-attribute">box-sizing</span>:border-box；</code></pre><h2 id="2-2-vsc快写"><a href="#2-2-vsc快写" class="headerlink" title="2.2 vsc快写:"></a>2.2 vsc快写:</h2>   <pre><code class="hljs css"><span class="hljs-comment">/*w:2+h:3*/</span><span class="hljs-attribute">width</span>: <span class="hljs-number">2px</span>;   <span class="hljs-attribute">height</span>: <span class="hljs-number">3px</span>;</code></pre><h2 id="2-3-清除默认样式："><a href="#2-3-清除默认样式：" class="headerlink" title="2.3 清除默认样式："></a>2.3 清除默认样式：</h2>   <pre><code class="hljs css">*&#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;&#125;</code></pre><h2 id="2-4-css书写顺序：-x3D-x3D-这种顺序可以使得网页加载更加流畅迅速。-x3D-x3D"><a href="#2-4-css书写顺序：-x3D-x3D-这种顺序可以使得网页加载更加流畅迅速。-x3D-x3D" class="headerlink" title="2.4 css书写顺序： &#x3D;&#x3D;这种顺序可以使得网页加载更加流畅迅速。&#x3D;&#x3D;"></a>2.4 css书写顺序： &#x3D;&#x3D;这种顺序可以使得网页加载更加流畅迅速。&#x3D;&#x3D;</h2><ul><li>浮动&#x2F;display</li><li>盒子模型的长宽高边距背景等属性。</li><li>文字样式</li></ul><h2 id="2-5-nth-child-选择器-x3D-x3D-匹配属于其父元素的第-N-个子元素，不论元素的类型。-x3D-x3D"><a href="#2-5-nth-child-选择器-x3D-x3D-匹配属于其父元素的第-N-个子元素，不论元素的类型。-x3D-x3D" class="headerlink" title="2.5 nth-child() 选择器:&#x3D;&#x3D;匹配属于其父元素的第 N 个子元素，不论元素的类型。&#x3D;&#x3D;"></a>2.5 nth-child() 选择器:&#x3D;&#x3D;匹配属于其父元素的第 N 个子元素，不论元素的类型。&#x3D;&#x3D;</h2>   <pre><code class="hljs css"><span class="hljs-comment">/*Odd 和 even 是可用于匹配下标是奇数或偶数的子元素的关键词。*/</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(odd) &#123; <span class="hljs-attribute">background</span>:<span class="hljs-number">#ff0000</span>; &#125; <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(even) &#123; <span class="hljs-attribute">background</span>:<span class="hljs-number">#0000ff</span>; &#125;<span class="hljs-comment">/*公式 (an + b)。表示周期的长度，n 是计数器（从 0 开始），b 是偏移值。*/</span><span class="hljs-comment">/*3倍数的所有 p 元素的背景色：*/</span><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>n+<span class="hljs-number">0</span>)&#123;<span class="hljs-attribute">background</span>:<span class="hljs-number">#ff0000</span>;&#125;</code></pre><h2 id="2-6-清除浮动-带来的影响"><a href="#2-6-清除浮动-带来的影响" class="headerlink" title="2.6 清除浮动(带来的影响)"></a>2.6 清除浮动(带来的影响)</h2>   <pre><code class="hljs css"> <span class="hljs-comment">/*父子级标签，子浮动，父没有高度导致其他标准流元素布局会受影响*/</span> <span class="hljs-comment">/*1.直接加高度可以解决但是有时无法确定高度*/</span> <span class="hljs-comment">/*2.额外加一个div标签会复杂化页面结构*/</span> <span class="hljs-comment">/*3.单伪元素清除法，类写在父级元素上*/</span>     <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span>&#123;         <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;.&#x27;</span>;         <span class="hljs-comment">/*伪元素是行内，清除浮动需要用块元素跟在父级后面*/</span>         <span class="hljs-attribute">display</span>: block;         <span class="hljs-attribute">clear</span>: both;         <span class="hljs-comment">/*兼容问题，避免老浏览器出现额外的边距等等*/</span>         <span class="hljs-attribute">height</span>:<span class="hljs-number">0</span>;         <span class="hljs-attribute">visibility</span>:hidden;     &#125;      <span class="hljs-selector-class">.clearfix</span> &#123;          *zoom: <span class="hljs-number">1</span>;   <span class="hljs-comment">/*用于IE6,7兼容 */</span>      &#125; <span class="hljs-comment">/*4.双伪元素清除法，类写在父级元素上（同时解决塌陷和浮动影响）推荐*/</span> <span class="hljs-comment">/*.clearfix::before解决外边距塌陷问题*/</span>     <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::before</span>,     <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span>&#123;         <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;         <span class="hljs-attribute">display</span>: table;     &#125;     <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span>&#123; <span class="hljs-attribute">clear</span>: both;     &#125;<span class="hljs-selector-class">.clearfix</span> &#123;          *zoom: <span class="hljs-number">1</span>;   <span class="hljs-comment">/*用于IE6,7兼容 */</span>      &#125; <span class="hljs-comment">/*5.overflow = hidden|auto|scroll 都可以实现，但是无法显示溢出元素*/</span> <span class="hljs-selector-class">.father</span> &#123;       <span class="hljs-attribute">overflow</span>: auto;     &#125;</code></pre><h2 id="2-7-定位-position"><a href="#2-7-定位-position" class="headerlink" title="2.7 定位 position"></a>2.7 定位 position</h2><h3 id="2-7-1-子绝父相。"><a href="#2-7-1-子绝父相。" class="headerlink" title="2.7.1 子绝父相。"></a>2.7.1 子绝父相。</h3><ul><li>相对定位：relative。占有原来的位置，相对自己原来的位置移动。div仍独占一行，类推。</li><li>绝对定位：absolute。先找已经定位的父级，参照父级定位，父级没定位参照浏览器窗口定位。脱标，不占位。</li></ul><h3 id="2-7-2-居中"><a href="#2-7-2-居中" class="headerlink" title="2.7.2 居中"></a>2.7.2 居中</h3><pre><code class="hljs css"><span class="hljs-number">1</span><span class="hljs-selector-class">.margin</span>:<span class="hljs-number">0</span> auto;<span class="hljs-comment">/*绝对定位以后用第一条定位无效，因为脱标了。*/</span><span class="hljs-number">2</span><span class="hljs-selector-class">.position</span>:absolute;<span class="hljs-comment">/*移动到了浏览器偏右边的位置*/</span><span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;<span class="hljs-comment">/*移动到中间中间偏下的位置*/</span><span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<span class="hljs-comment">/*移动到中间位置*/</span><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>,-<span class="hljs-number">50%</span>);</code></pre><p>###2.7.3 固定 fixed</p><pre><code class="hljs css"><span class="hljs-comment">/*脱标不占位置，改变位置参考浏览器的窗口，和绝对定位一样具备行内块特点。*/</span><span class="hljs-attribute">position</span>:fixed;</code></pre><h3 id="2-7-4-显示层级"><a href="#2-7-4-显示层级" class="headerlink" title="2.7.4 显示层级"></a>2.7.4 显示层级</h3><ul><li><p>标准流&lt;浮动&lt;定位（底部&lt;顶部）</p></li><li><p>定位的情况下，后来者居上。</p></li><li><p>定位的情况下，使用z-index属性：取值越大显示越靠上。（默认值是0）</p></li></ul><p>##2.8 装饰</p><h3 id="2-8-1-垂直对齐方式"><a href="#2-8-1-垂直对齐方式" class="headerlink" title="2.8.1 垂直对齐方式"></a>2.8.1 垂直对齐方式</h3><p><strong>vertical-align属性</strong></p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>baseline</td><td>默认，基线对齐</td></tr><tr><td>top</td><td>顶部对齐</td></tr><tr><td>middle</td><td>中部对齐</td></tr><tr><td>bottom</td><td>底部对齐</td></tr></tbody></table><ul><li><p>行内和行内块标签默认按基线对齐的，去middle对齐。把行内变成块也可以解决。</p></li><li><p>想让行内和行内块水平居中和文字居中方式一样text-align。（浏览器均当作文字处理）</p></li></ul><p>###2.8.2 鼠标</p><p><strong>cursor属性</strong></p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>default</td><td>箭头</td></tr><tr><td>pointer</td><td>手，提示可以点击。</td></tr><tr><td>text</td><td>工字形，提示可以选择文字。</td></tr><tr><td>move</td><td>十字光标，提示可以移动。</td></tr></tbody></table><h3 id="2-8-3-精灵图"><a href="#2-8-3-精灵图" class="headerlink" title="2.8.3 精灵图"></a>2.8.3 精灵图</h3><ol><li><p>创建一个盒子，设置盒子的尺寸和小图的尺寸相同。</p></li><li><p>将精灵图设置为盒子的背景图片。</p></li><li><p>修改背景图片的位置，设置每个小div的&#x3D;&#x3D;background-position: x y。&#x3D;&#x3D;</p></li></ol><h2 id="2-9-平面转换-transform属性"><a href="#2-9-平面转换-transform属性" class="headerlink" title="2.9 平面转换 transform属性"></a>2.9 平面转换 transform属性</h2><pre><code class="hljs css"><span class="hljs-comment">/*位移*/</span><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(x水平,y垂直);<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate3d</span>(x水平,y垂直，z);<span class="hljs-comment">/*透视，配合translate实现z轴展示*/</span><span class="hljs-attribute">perspective</span>：<span class="hljs-number">800</span>-<span class="hljs-number">1200px</span>;<span class="hljs-comment">/*默认水平移动*/</span><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">50px</span>);<span class="hljs-comment">/*垂直移动*/</span><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateY</span>(<span class="hljs-number">50px</span>);<span class="hljs-comment">/*双开门动画*/</span>可以用伪类加精灵图的方式实现。https://www.bilibili.com/video/BV1xq4y1q7jZ/?p=<span class="hljs-number">14</span>&amp;share_source=copy_web&amp;vd_source=<span class="hljs-number">4424</span>da35f5598c7a4ce84ace48dec503<span class="hljs-comment">/*旋转效果写在hover伪类上 要配合过渡属性*/</span>transform:<span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>);<span class="hljs-comment">/*围绕z轴就是2维旋转效果，x轴横向旋转和y轴纵向旋转，3d自定义旋转*/</span><span class="hljs-attribute">transform</span>:rotatex/y/z/<span class="hljs-number">3</span><span class="hljs-built_in">d</span>(<span class="hljs-number">360deg</span>);<span class="hljs-comment">/*转换原点写在原标签上*/</span><span class="hljs-attribute">transform-origin</span>：<span class="hljs-attribute">left</span> <span class="hljs-attribute">top</span> <span class="hljs-attribute">right</span> <span class="hljs-attribute">bottom</span> center<span class="hljs-comment">/*多个转换先写位移后旋转否则改变坐标轴向*/</span><span class="hljs-comment">/*缩放*/</span><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>);大于<span class="hljs-number">1</span>放大，反之缩小。<span class="hljs-comment">/*立体，让子元素3d呈现*/</span><span class="hljs-attribute">transform-style</span>:preserve-<span class="hljs-number">3</span>d;</code></pre><h2 id="2-10-渐变"><a href="#2-10-渐变" class="headerlink" title="2.10 渐变"></a>2.10 渐变</h2><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(颜色，颜色，颜色)；background-image: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-built_in">transparent</span>(透明),<span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));</code></pre><h2 id="2-11-Flex布局"><a href="#2-11-Flex布局" class="headerlink" title="2.11 Flex布局"></a>2.11 Flex布局</h2><p>###2.11.1 轴对齐布局</p><pre><code class="hljs css"><span class="hljs-comment">/*流式布局*/</span><span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>height:固定px;<span class="hljs-comment">/*Flex（弹性）布局一般加在父级上*/</span><span class="hljs-attribute">display</span>: flex;<span class="hljs-comment">/*主轴对齐方式 添加父级上*/</span><span class="hljs-attribute">justify-content</span>: <span class="hljs-comment">/*居中*/</span>center <span class="hljs-comment">/*间距加载子级的两侧*/</span>space-around <span class="hljs-comment">/*间距在盒子子级之间*/</span>space-beteween <span class="hljs-comment">/*所有地方间距都相等*/</span>space-evenly;<span class="hljs-comment">/*侧轴对齐方式 添加父级上*/</span><span class="hljs-attribute">align-items</span>:<span class="hljs-comment">/*居中*/</span>center<span class="hljs-comment">/*拉伸（默认效果）*/</span>stretch;<span class="hljs-comment">/*单独设置某个弹性盒子的侧轴对齐方式*/</span><span class="hljs-attribute">align-self</span>: center;<span class="hljs-comment">/*以上父级flex的情况下，没有其他设置子级高度和父级一致*/</span></code></pre><p>###2.11.2 伸缩比</p><pre><code class="hljs css"><span class="hljs-comment">/*该盒子占父级剩余尺寸的份数*/</span><span class="hljs-attribute">flex</span>:整数值;</code></pre><p>##2.12 移动端适配<br>###2.12.1 使用媒体查询差异化css样式</p><pre><code class="hljs css"> <span class="hljs-comment">/*@media(媒体特性)&#123;</span><span class="hljs-comment">    选择器&#123;</span><span class="hljs-comment">      css属性</span><span class="hljs-comment">    &#125;</span><span class="hljs-comment">   &#125;</span><span class="hljs-comment">1.HTML标签添加字号 1/10；</span><span class="hljs-comment">2.写rem单位的尺寸；</span><span class="hljs-comment">设计稿375px，字号37.5px</span><span class="hljs-comment">rem=内容的px/37.5px；</span><span class="hljs-comment">*/</span> orientation：判断屏幕方向。<span class="hljs-attribute">max-width</span>:表示最大值，要小于这个值。（从大到小写）min-width:表示最小值，要大于这个值。（从小到大写）高也有类似的属性但一般不用。<span class="hljs-comment">/*视口的宽小于等于768px背景色是粉色*/</span>@<span class="hljs-built_in">media</span>(max-width：<span class="hljs-number">768px</span>)&#123;    <span class="hljs-selector-tag">html</span>&#123;      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">37.5px</span>;          &#125;&#125;<span class="hljs-comment">/*要按照数字的大小写，否则只生效最大或最小的属性。*/</span>现在可以使用手机淘宝的flexible<span class="hljs-selector-class">.js</span>来适配。完整写法：<span class="hljs-keyword">@media</span> 关键词 媒体类型 <span class="hljs-keyword">and</span> (媒体特性)&#123;css&#125; .关键词: and only not .媒体类型： screen print speech <span class="hljs-built_in">all</span>(几乎不用)<span class="hljs-comment">/*还可与用link标签写法*/</span>&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> media=<span class="hljs-string">&quot;逻辑符 媒体类型 and (媒体特性)&quot;</span> href=<span class="hljs-string">&quot;xx.css&quot;</span>&gt;注意没有@符号<span class="hljs-comment">/*隐藏*/</span>当页面小于一定值，在媒体查询里面写&#123;<span class="hljs-attribute">display</span>：<span class="hljs-attribute">none</span>&#125;用于隐藏一些组件。</code></pre><h3 id="2-13-Less语法"><a href="#2-13-Less语法" class="headerlink" title="2.13 Less语法"></a>2.13 Less语法</h3><ul><li>Less是一个css的预处理器。</li><li>使用Less可以完成px到rem的单位转换，以及更清晰的CSS目录结构。</li></ul><pre><code class="hljs less"><span class="hljs-comment">//注释内容，这是单行注释，尽量别用css看不见</span><span class="hljs-comment">/*多行注释*/</span><span class="hljs-comment">/*除法*/</span><span class="hljs-attribute">width</span>:(<span class="hljs-number">68</span> / <span class="hljs-number">37.5rem</span>);<span class="hljs-comment">/*嵌套写法*/</span>.父级选择器&#123;    <span class="hljs-comment">//父级样式</span>    .子级选择器&#123;       <span class="hljs-comment">//子级样式 </span>    &#125;&#125;<span class="hljs-selector-tag">&amp;</span>符号，例如子集里的<span class="hljs-selector-tag">&amp;</span>：<span class="hljs-selector-tag">hover</span>，就只会生产子集里的 .子集：<span class="hljs-selector-tag">hover</span>@符号，类似<span class="hljs-selector-tag">C</span>中的<span class="hljs-selector-tag">define</span>；@<span class="hljs-selector-tag">Colora</span>：<span class="hljs-selector-tag">pink</span>;<span class="hljs-selector-class">.box</span>&#123;    <span class="hljs-attribute">color</span>:<span class="hljs-variable">@Colora</span>;&#125;<span class="hljs-comment">/*引入其他less文件*/</span><span class="hljs-keyword">@import</span><span class="hljs-string">&#x27;./1.less&#x27;</span>; 配置<span class="hljs-selector-tag">less</span>导出路径：<span class="hljs-number">1</span><span class="hljs-selector-class">.EasyLess</span>插件的<span class="hljs-selector-tag">setting</span>里设置： &quot;<span class="hljs-selector-tag">less</span><span class="hljs-selector-class">.compile</span>&quot;: &#123;        &quot;<span class="hljs-selector-tag">out</span>&quot;:&quot;./<span class="hljs-selector-tag">css</span>/&quot;        &#125;<span class="hljs-number">2</span><span class="hljs-selector-class">.less</span>文件内指定路径：<span class="hljs-comment">//out:./abc/</span><span class="hljs-selector-class">.box</span>&#123;    <span class="hljs-attribute">color</span>: aliceblue;&#125;<span class="hljs-number">3</span>.禁止导出：<span class="hljs-comment">//out:false</span>        </code></pre><h3 id="2-14-vw-x2F-vh移动适配效果"><a href="#2-14-vw-x2F-vh移动适配效果" class="headerlink" title="2.14 vw&#x2F;vh移动适配效果"></a>2.14 vw&#x2F;vh移动适配效果</h3><p>vw: viewport width 视口的宽度，1vw &#x3D; 1&#x2F;100视口宽度</p><p>vh: viewport height 视口的高度   1vh &#x3D; 1&#x2F;100视口高度</p><p>例如 375px*687px宽的   宽 &#x3D; （68&#x2F;3.75px）高 </p><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><pre><code class="hljs javascript"><span class="hljs-comment">/* 存在 title 属性的 &lt;a&gt; 元素 */</span>a[title] &#123;  <span class="hljs-attr">color</span>: purple;&#125;<span class="hljs-comment">/* 存在 href 属性并且属性值匹配&quot;https://example.org&quot;的 &lt;a&gt; 元素 */</span>a[href=<span class="hljs-string">&quot;https://example.org&quot;</span>] &#123;  <span class="hljs-attr">color</span>: green;&#125;<span class="hljs-comment">/* 存在 href 属性并且属性值包含&quot;example&quot;的 &lt;a&gt; 元素 */</span>a[href*=<span class="hljs-string">&quot;example&quot;</span>] &#123;  font-<span class="hljs-attr">size</span>: 2em;&#125;<span class="hljs-comment">/* 存在 href 属性并且属性值结尾是&quot;.org&quot;的 &lt;a&gt; 元素 */</span>a[href$=<span class="hljs-string">&quot;.org&quot;</span>] &#123;  font-<span class="hljs-attr">style</span>: italic;&#125;<span class="hljs-comment">/* 存在 class 属性并且属性值包含单词&quot;logo&quot;的&lt;a&gt;元素 */</span>a[<span class="hljs-keyword">class</span>~=<span class="hljs-string">&quot;logo&quot;</span>] &#123;  <span class="hljs-attr">padding</span>: 2px;&#125;</code></pre><h1 id="3-JS笔记"><a href="#3-JS笔记" class="headerlink" title="3.JS笔记"></a>3.JS笔记</h1><h2 id="3-1-基础语法"><a href="#3-1-基础语法" class="headerlink" title="3.1 基础语法"></a>3.1 基础语法</h2><h3 id="3-1-1-变量、常量、关键字"><a href="#3-1-1-变量、常量、关键字" class="headerlink" title="3.1.1 变量、常量、关键字"></a>3.1.1 变量、常量、关键字</h3><ol><li>var 可以先使用再声明（不合理）</li><li>var声明过的变量可以重复声明（不合理）比如变量提升，全局变量，没有块级作用域。</li><li>日常开发一般用let声明变量。</li><li>const用来定义常量，不允许更改，声明时必须赋值。</li><li>&#x3D;&#x3D;有了变量优先用const声明，如果发现需要修改再改成let，建议数组和对象用const&#x3D;&#x3D;</li><li>模板字符串：<code>我叫$&#123;name&#125;</code>(用反引号包裹住，方便拼接字符串)</li><li>隐式转换：除了+以外的算术运算符都会把数据转换成数字类型。任何数据和字符串相加结果都是字符串。</li><li>运算符优先级（!&gt;&amp;&amp;&gt;||)<img src="D:\编程练习题目\web\image\image-20230301205305740.png"></li></ol><p>###3.1.2 数组</p><p>####添加数据</p><ul><li><p>arr.push()：将新数据添加到数组后面。</p></li><li><p>arr.unshift()：将新数据添加到数组第一个元素。</p></li></ul><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><ul><li><p>arr.pop()：删除数字最后一个元素。</p></li><li><p>arr.shift():删除第一个元素。</p></li><li><p>arr.splice(操作起始下标，删除个数)，例如arr.splice(1)，从第一个删到最后。</p></li><li><ol start="2"><li>添加  数组.splice(起始位置, 删除个数, 添加的元素)</li></ol><p>  &#x2F;&#x2F; 把 pink 放到 red 和 green中间</p><p>  &#x2F;&#x2F; 起始位置 要放到的索引号位置</p><p>  &#x2F;&#x2F; arr.splice(1, 0, ‘pink’)</p></li></ul><h2 id="3-2-函数"><a href="#3-2-函数" class="headerlink" title="3.2 函数"></a>3.2 函数</h2><p>###3.2.1 函数声明</p><pre><code class="hljs javascript">具名函数：<span class="hljs-keyword">function</span> 函数名(形式参数列表)&#123;      函数体    &#125;;函数名(传递的现实参数)可以给形参一个默认值，这样程序更严谨。不会出现<span class="hljs-literal">undefined</span>。匿名函数：<span class="hljs-number">1.</span>函数表达式：<span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params">参数</span>)&#123;    函数体&#125;函数表达式必须先声明后调用<span class="hljs-number">2.</span>立即执行函数：第一种写法：(<span class="hljs-keyword">function</span>(<span class="hljs-params">形参</span>)&#123;函数体&#125;)(实参);第二种写法：(<span class="hljs-keyword">function</span>(<span class="hljs-params">形参</span>)&#123;函数体&#125;(实参));必须要加分号作为结尾符。</code></pre><h3 id="3-2-2-作用域"><a href="#3-2-2-作用域" class="headerlink" title="3.2.2 作用域"></a>3.2.2 作用域</h3><p>####作用域</p><ol><li><p>全局作用域：作用于整个<script>标签内的，或是独立的js文件。</p><ul><li>全局变量：函数外的let变量，在任何区域都可以访问和修改。</li></ul></li><li><p>局部作用域：作用于函数的内部。</p><ul><li>局部变量：只在当前函数内部访问和修改。</li></ul></li><li><p>如果函数内部，变量没有声明直接赋值也当全局变量来看（不推荐）。</p></li></ol><p>####逻辑中断</p><pre><code class="hljs javascript">&amp;&amp;:左边为<span class="hljs-literal">false</span>就短路。两边都是<span class="hljs-literal">true</span>则最后一个真值。||:左边为<span class="hljs-literal">true</span>就短路。两边都是<span class="hljs-literal">true</span>则返回第一个真值。运算结果都是最后被执行的表达式值，一般用在变量赋值。</code></pre><p>####转换布尔型</p><p>“、0、undefined、null、false、NaN转换为布尔值后是false，其余为true。</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>object：可以理解为一种无序数据集合。</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;    <span class="hljs-attr">uname</span>:<span class="hljs-string">&#x27;pink老师&#x27;</span>,    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,    <span class="hljs-attr">gender</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;<span class="hljs-comment">//查询对象属性</span>obj.<span class="hljs-property">uname</span>obj[<span class="hljs-string">&#x27;uname&#x27;</span>]（常用）<span class="hljs-comment">//添加对象属性</span>obj.<span class="hljs-property">hobby</span> = <span class="hljs-string">&#x27;足球&#x27;</span>，添加了一个新属性hobby<span class="hljs-comment">//修改对象属性</span>obj.<span class="hljs-property">gender</span> = <span class="hljs-string">&#x27;男&#x27;</span><span class="hljs-comment">//删（不推荐）</span><span class="hljs-keyword">delete</span>.<span class="hljs-property">obj</span>.<span class="hljs-property">hobby</span><span class="hljs-comment">//对象中添加方法</span><span class="hljs-keyword">let</span> obj = &#123;    <span class="hljs-attr">uname</span>:<span class="hljs-string">&#x27;pink老师&#x27;</span>,    <span class="hljs-comment">//方法</span>    <span class="hljs-attr">sayhi</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>)    &#125;&#125;<span class="hljs-comment">//遍历对象 </span><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> obj)&#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k)<span class="hljs-comment">//打印属性名，是字符串</span>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[k])<span class="hljs-comment">//打印属性值，不能用obj.k，因为k是字符串。</span>&#125;</code></pre><p>####js渲染原生表格</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> data = [&#123;<span class="hljs-attr">src</span>:<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-attr">num</span>:<span class="hljs-number">1225</span>&#125;,&#123;...&#125;,&#123;...&#125;];<span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;data.<span class="hljs-property">length</span>; i++)&#123;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">`</span><span class="hljs-string">&lt;li&gt;</span><span class="hljs-string">&lt;a href=&quot;#&quot;&gt;</span><span class="hljs-string">&lt;img src=<span class="hljs-subst">$&#123;data[i].src&#125;</span> title=<span class="hljs-subst">$&#123;data[i].title&#125;</span></span><span class="hljs-string">&lt;/a&gt;</span><span class="hljs-string">&lt;/li&gt;`</span>)&#125;</code></pre><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li><p>栈：由操作系统自动分配释放，存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</p></li><li><p>堆：存放复杂类型（对象），一般由程序员分配释放，或垃圾回收机制回收。</p></li><li><p>值类型：简单数据类型/基本数据类型，存储它本身。例如：string、number、Boolean、undefined、null。</p></li><li><p>引用类型：复杂数据类型，变量中只存地址（引用）。例如：通过new关键字创建的对象，object、array、date等。</p></li></ul><h4 id="定时器函数-间歇函数"><a href="#定时器函数-间歇函数" class="headerlink" title="定时器函数-间歇函数"></a>定时器函数-间歇函数</h4><pre><code class="hljs js"><span class="hljs-built_in">setInterval</span>(函数名，间隔时间/毫秒)<span class="hljs-title function_">setInterval</span>(<span class="hljs-params"><span class="hljs-keyword">function</span>()&#123;&#125;，<span class="hljs-number">1000</span></span>)&#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;一秒执行一次&#x27;</span>)&#125;<span class="hljs-built_in">clearInterval</span>()<span class="hljs-comment">//关闭定时器</span></code></pre><p>setInterval(函数，间隔时间)</p><p>##3.3 DOM和BOM</p><p>###3.3.1 DOM:文档对象模型</p><pre><code class="hljs javascript"><span class="hljs-comment">//获取元素</span><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div ul&#x27;</span>)<span class="hljs-comment">//添加类名</span>div.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;nav box&#x27;</span>(会覆盖以前的类名)<span class="hljs-comment">//追加类</span>div.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;nav&#x27;</span>)<span class="hljs-comment">//删除类</span>div.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;nav&#x27;</span>)<span class="hljs-comment">//切换类</span>div.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;nav&#x27;</span>)<span class="hljs-comment">//表单</span>table.<span class="hljs-property">value</span><span class="hljs-comment">//表格的值</span>table.<span class="hljs-property">type</span><span class="hljs-comment">//text&amp;password</span><span class="hljs-comment">//自定义属性</span>data-自定义属性<span class="hljs-comment">//&lt;div data-id=&quot;1&quot;&gt;1&lt;/div&gt;</span></code></pre><h4 id="3-3-2-事件监听"><a href="#3-3-2-事件监听" class="headerlink" title="3.3.2 事件监听"></a>3.3.2 事件监听</h4><pre><code class="hljs javascript">元素对象.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;事件类型，要执行的函数&#x27;</span>)<span class="hljs-comment">//三要素</span><span class="hljs-comment">//事件源：被事件触发的dom元素</span><span class="hljs-comment">//事件类型：触发的方式，例如click,mouseover等</span><span class="hljs-comment">//事件调用的函数：要做什么事</span>和on的区别，可以多次绑定，不会被覆盖。常用的事件：click,mousseenter,mousseleave,foucus,blur,keydown,keyup</code></pre><h3 id="3-3-3事件对象"><a href="#3-3-3事件对象" class="headerlink" title="3.3.3事件对象"></a>3.3.3事件对象</h3><p>存储事件触发时的相关信息，在事件绑定的回调函数的第一个参数就是事件对象。</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)  input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">*e*</span>) &#123;<span class="hljs-keyword">if</span> (*e*.<span class="hljs-property">key</span> === <span class="hljs-string">&#x27;Enter&#x27;</span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我按下了回车键&#x27;</span>)&#125;&#125;)常用属性:type、key</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-HTML笔记&quot;&gt;&lt;a href=&quot;#1-HTML笔记&quot; class=&quot;headerlink&quot; title=&quot;1.HTML笔记&quot;&gt;&lt;/a&gt;1.HTML笔记&lt;/h1&gt;&lt;p&gt;##1.1 vsc快写：&lt;br&gt;   &lt;pre&gt;&lt;code class=&quot;hljs html</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jsAPI笔记</title>
    <link href="http://example.com/2023/03/12/jsAPI/"/>
    <id>http://example.com/2023/03/12/jsAPI/</id>
    <published>2023-03-12T10:40:02.387Z</published>
    <updated>2023-03-19T03:40:26.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h1><blockquote><p>学会通过为DOM注册事件来实现可交互的网页特效。</p></blockquote><ul><li>能够判断函数运行的环境并确字 this 所指代的对象</li><li>理解事件的作用，知道应用事件的 3 个步骤</li></ul><blockquote><p>学习会为 DOM 注册事件，实现简单可交互的网页特交。</p></blockquote><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件是编程语言中的术语，它是用来描述程序的行为或状态的，<strong>一旦行为或状态发生改变，便立即调用一个函数。</strong></p><p>例如：用户使用【鼠标点击】网页中的一个按钮、用户使用【鼠标拖拽】网页中的一张图片</p><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>结合 DOM 使用事件时，需要为 DOM 对象添加事件监听，等待事件发生（触发）时，便立即调用一个函数。</p><p><code>addEventListener</code> 是 DOM 对象专门用来添加事件监听的方法，它的两个参数分别为【事件类型】和【事件回调】。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>事件监听<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>事件监听<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>为 DOM 元素添加事件监听，等待事件发生，便立即执行一个函数。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>点击改变文字颜色<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-comment">// 1. 获取 button 对应的 DOM 对象</span></span><span class="language-javascript">    <span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btn&#x27;</span>)</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-comment">// 2. 添加事件监听</span></span><span class="language-javascript">    btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;等待事件被触发...&#x27;</span>)</span><span class="language-javascript">      <span class="hljs-comment">// 改变 p 标签的文字颜色</span></span><span class="language-javascript">      <span class="hljs-keyword">let</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;text&#x27;</span>)</span><span class="language-javascript">      text.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span></span><span class="language-javascript">    &#125;)</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-comment">// 3. 只要用户点击了按钮，事件便触发了！！！</span></span><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>完成事件监听分成3个步骤：</p><ol><li>获取 DOM 元素</li><li>通过 <code>addEventListener</code> 方法为 DOM 节点添加事件监听</li><li>等待事件触发，如用户点击了某个按钮时便会触发 <code>click</code> 事件类型</li><li>事件触发后，相对应的回调函数会被执行</li></ol><p>大白话描述：所谓的事件无非就是找个机会（事件触发）调用一个函数（回调函数）。</p><h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3><p><code>click</code> 译成中文是【点击】的意思，它的含义是监听（等着）用户鼠标的单击操作，除了【单击】还有【双击】<code>dblclick</code></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="hljs-comment">// 双击事件类型</span></span><span class="language-javascript">  btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;dblclick&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;等待事件被触发...&#x27;</span>);</span><span class="language-javascript">    <span class="hljs-comment">// 改变 p 标签的文字颜色</span></span><span class="language-javascript">    <span class="hljs-keyword">const</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.text&#x27;</span>)</span><span class="language-javascript">    text.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span></span><span class="language-javascript">  &#125;)</span><span class="language-javascript"></span><span class="language-javascript">  <span class="hljs-comment">// 只要用户双击击了按钮，事件便触发了！！！</span></span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>结论：【事件类型】决定了事件被触发的方式，如 <code>click</code> 代表鼠标单击，<code>dblclick</code> 代表鼠标双击。</p><h3 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h3><p><code>addEventListener</code> 的第2个参数是函数，这个函数会在事件被触发时立即被调用，在这个函数中可以编写任意逻辑的代码，如改变 DOM 文本颜色、文本内容等。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="hljs-comment">// 双击事件类型</span></span><span class="language-javascript">  btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;dblclick&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;等待事件被触发...&#x27;</span>)</span><span class="language-javascript">    </span><span class="language-javascript">    <span class="hljs-keyword">const</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.text&#x27;</span>)</span><span class="language-javascript">    <span class="hljs-comment">// 改变 p 标签的文字颜色</span></span><span class="language-javascript">    text.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span></span><span class="language-javascript">    <span class="hljs-comment">// 改变 p 标签的文本内容</span></span><span class="language-javascript">    text.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = <span class="hljs-string">&#x27;20px&#x27;</span></span><span class="language-javascript">  &#125;)</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>结论：【事件处理程序】决定了事件触发后应该执行的逻辑。</p><h2 id="事件类型-1"><a href="#事件类型-1" class="headerlink" title="事件类型"></a>事件类型</h2><p>将众多的事件类型分类可分为：鼠标事件、键盘事件、表单事件、焦点事件等，我们逐一展开学习。</p><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>鼠标事件是指跟鼠标操作相关的事件，如单击、双击、移动等。</p><ol><li>&#96;mouseenter 监听鼠标是否移入 DOM 元素</li></ol><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>鼠标事件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>监听与鼠标相关的操作<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-comment">// 需要事件监听的 DOM 元素</span></span><span class="language-javascript">    <span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>);</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-comment">// 监听鼠标是移入当前 DOM 元素</span></span><span class="language-javascript">    box.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseenter&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">      <span class="hljs-comment">// 修改文本内容</span></span><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;鼠标移入了...&#x27;</span>;</span><span class="language-javascript">      <span class="hljs-comment">// 修改光标的风格</span></span><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">cursor</span> = <span class="hljs-string">&#x27;move&#x27;</span>;</span><span class="language-javascript">    &#125;)</span><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><ol><li>&#96;mouseleave 监听鼠标是否移出 DOM 元素</li></ol><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>鼠标事件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>监听与鼠标相关的操作<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-comment">// 需要事件监听的 DOM 元素</span></span><span class="language-javascript">    <span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>);</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-comment">// 监听鼠标是移出当前 DOM 元素</span></span><span class="language-javascript">    box.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseleave&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">      <span class="hljs-comment">// 修改文本内容</span></span><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;鼠标移出了...&#x27;</span>;</span><span class="language-javascript">    &#125;)</span><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>keydown   键盘按下触发<br>keyup   键盘抬起触发</p><h3 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h3><p>focus  获得焦点</p><p>blur 失去焦点</p><h3 id="文本框输入事件"><a href="#文本框输入事件" class="headerlink" title="文本框输入事件"></a>文本框输入事件</h3><p>input  </p><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>任意事件类型被触发时与事件相关的信息会被以对象的形式记录下来，我们称这个对象为事件对象。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>事件对象<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>任意事件类型被触发时与事件相关的信息会被以对象的形式记录下来，我们称这个对象为事件对象。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-comment">// 获取 .box 元素</span></span><span class="language-javascript">    <span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>)</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-comment">// 添加事件监听</span></span><span class="language-javascript">    box.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;任意事件类型被触发后，相关信息会以对象形式被记录下来...&#x27;</span>);</span><span class="language-javascript"></span><span class="language-javascript">      <span class="hljs-comment">// 事件回调函数的第1个参数即所谓的事件对象</span></span><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)</span><span class="language-javascript">    &#125;)</span><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p>事件回调函数的【第1个参数】即所谓的事件对象，通常习惯性的将这个对数命名为 <code>event</code>、<code>ev</code> 、<code>ev</code> 。</p><p>接下来简单看一下事件对象中包含了哪些有用的信息：</p><ol><li><code>ev.type</code> 当前事件的类型</li><li><code>ev.clientX/Y</code> 光标相对浏览器窗口的位置</li><li><code>ev.offsetX/Y</code> 光标相于当前 DOM 元素的位置</li></ol><p>注：在事件回调函数内部通过 window.event 同样可以获取事件对象。</p><h2 id="环境对象"><a href="#环境对象" class="headerlink" title="环境对象"></a>环境对象</h2><blockquote><p>能够分析判断函数运行在不同环境中 this 所指代的对象。</p></blockquote><p>环境对象指的是函数内部特殊的变量 <code>this</code> ，它代表着当前函数运行时所处的环境。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="hljs-comment">// 声明函数</span></span><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">    <span class="hljs-comment">// this 是一个变量</span></span><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);</span><span class="language-javascript">  &#125;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="hljs-comment">// 声明一个对象</span></span><span class="language-javascript">  <span class="hljs-keyword">let</span> user = &#123;</span><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,</span><span class="language-javascript">    <span class="hljs-attr">sayHi</span>: sayHi <span class="hljs-comment">// 此处把 sayHi 函数，赋值给 sayHi 属性</span></span><span class="language-javascript">  &#125;</span><span class="language-javascript">  </span><span class="language-javascript">  <span class="hljs-keyword">let</span> person = &#123;</span><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>,</span><span class="language-javascript">    <span class="hljs-attr">sayHi</span>: sayHi</span><span class="language-javascript">  &#125;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="hljs-comment">// 直接调用</span></span><span class="language-javascript">  <span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">// window</span></span><span class="language-javascript">  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">// window</span></span><span class="language-javascript"></span><span class="language-javascript">  <span class="hljs-comment">// 做为对象方法调用</span></span><span class="language-javascript">  user.<span class="hljs-title function_">sayHi</span>()<span class="hljs-comment">// user</span></span><span class="language-javascript">person.<span class="hljs-title function_">sayHi</span>()<span class="hljs-comment">// person</span></span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>结论：</p><ol><li><code>this</code> 本质上是一个变量，数据类型为对象</li><li>函数的调用方式不同 <code>this</code> 变量的值也不同</li><li>【谁调用 <code>this</code> 就是谁】是判断 <code>this</code> 值的粗略规则</li><li>函数直接调用时实际上 <code>window.sayHi()</code> 所以 <code>this</code> 的值为 <code>window</code></li></ol><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>如果将函数 A 做为参数传递给函数 B 时，我们称函数 A 为回调函数。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="hljs-comment">// 声明 foo 函数</span></span><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">arg</span>) &#123;</span><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg);</span><span class="language-javascript">  &#125;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="hljs-comment">// 普通的值做为参数</span></span><span class="language-javascript">  <span class="hljs-title function_">foo</span>(<span class="hljs-number">10</span>);</span><span class="language-javascript">  <span class="hljs-title function_">foo</span>(<span class="hljs-string">&#x27;hello world!&#x27;</span>);</span><span class="language-javascript">  <span class="hljs-title function_">foo</span>([<span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-string">&#x27;css&#x27;</span>, <span class="hljs-string">&#x27;javascript&#x27;</span>]);</span><span class="language-javascript"></span><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;函数也能当参数...&#x27;</span>);</span><span class="language-javascript">  &#125;</span><span class="language-javascript">  <span class="hljs-comment">// 函数也可以做为参数！！！！</span></span><span class="language-javascript">  <span class="hljs-title function_">foo</span>(bar);</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>函数 <code>bar</code> 做参数传给了 <code>foo</code> 函数，<code>bar</code> 就是所谓的回调函数了！！！</p><p>我们回顾一下间歇函数 <code>setInterval</code> </p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是回调函数...&#x27;</span>);</span><span class="language-javascript">  &#125;</span><span class="language-javascript">  <span class="hljs-comment">// 调用定时器</span></span><span class="language-javascript">  <span class="hljs-built_in">setInterval</span>(fn, <span class="hljs-number">1000</span>);</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p><code>fn</code> 函数做为参数传给了 <code>setInterval</code> ，这便是回调函数的实际应用了，结合刚刚学习的函数表达式上述代码还有另一种更常见写法。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="hljs-comment">// 调用定时器，匿名函数做为参数</span></span><span class="language-javascript">  <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是回调函数...&#x27;</span>);</span><span class="language-javascript">  &#125;, <span class="hljs-number">1000</span>);</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>结论：</p><ol><li>回调函数本质还是函数，只不过把它当成参数使用</li><li>使用匿名函数做为回调函数比较常见</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web-APIs&quot;&gt;&lt;a href=&quot;#Web-APIs&quot; class=&quot;headerlink&quot; title=&quot;Web APIs&quot;&gt;&lt;/a&gt;Web APIs&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;学会通过为DOM注册事件来实现可交互的网页特效。&lt;/p&gt;
&lt;/bl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://example.com/2023/03/08/markdowmGrammar/"/>
    <id>http://example.com/2023/03/08/markdowmGrammar/</id>
    <published>2023-03-08T08:50:44.887Z</published>
    <updated>2023-03-19T06:13:49.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>标题用#号来表示，#的个数增加，级数往下递增</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><p><strong>加粗</strong>  （使用**包裹）</p><p><em>斜体</em>      （ 使用*包裹）</p><p><em><strong>斜体加粗</strong></em> （使用***包裹）</p><p><del>删除线</del> （使用~~包裹）</p><p>&#x3D;&#x3D;高亮&#x3D;&#x3D;（使用&#x3D;&#x3D;包裹）</p><p>我是^上标^ （使用^包裹）</p><p>我是<del>下标</del> （使用~包裹）</p><h1 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>一二三四五</li></ul><ul><li>一二三四五 （开头携带 +或者*接空格)</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol><li>一二三四五</li><li>上山打老虎（就是1.接空格）</li></ol><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>| Mon    | TUE    | WED    | THU    | FRI    |</p><p>| —— | —— | —— | —— | —— |</p><p>| 上山   | 上山   | 上山   | 上山   | 上山   |</p><p>| 打老虎 | 打老虎 | 打老虎 | 打老虎 | 打老虎 |</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>使用&gt;表示，个数越多，字体越大</p><blockquote><p>一二三四五</p><blockquote><p>上山打老虎</p><blockquote><p>老虎没打到</p><blockquote><p>打到小松鼠</p></blockquote></blockquote></blockquote></blockquote><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><hr><p>（就是虚线）</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><code>我是代码</code>（使用&#96;包裹）</p><pre><code class="hljs html">https://www.bilibili.com/read/cv6491991 出处：bilibili</code></pre><p>（使用 &#96;&#96;&#96;接语言类型）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、标题&quot;&gt;&lt;a href=&quot;#一、标题&quot; class=&quot;headerlink&quot; title=&quot;一、标题&quot;&gt;&lt;/a&gt;一、标题&lt;/h1&gt;&lt;p&gt;标题用#号来表示，#的个数增加，级数往下递增&lt;/p&gt;
&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class</summary>
      
    
    
    
    
  </entry>
  
</feed>
